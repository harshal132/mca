getwd()
getwd()
getwd()
getwd()
setwd("F:\Repositories\mca\semester-1\advanced-database-management-system\r-working-directory")
setwd("F:/Repositories/mca/semester-1/advanced-database-management-system/r-working-directory")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
library(stats)
getwd()
setwd("F:/Repositories/mca/semester-1/advanced-database-management-system/r-working-directory")
library(stats)
library(dplyr)
library(ggplot2)
clear
library(stats)
library(dplyr)
install.packages("dplyr")
install.packages("ggplot2")
library(stats)
library(dplyr)
library(ggplot2)
#Code
mydata = select(iris,c(1,2,3,4))
model = kmeans(mydata, 3)
print(model)
print(mode$cluster)
print(model$cluster)
print("Cluster Value:",model$cluster)
print(model$cluster)
print(model$size)
print(model$size)
table(model$cluster,iris$Species)
#Plot Graph
model$cluster = as.factor(model$cluster)
ggplot(iris, aes(Petal.Length, petal.Width, color = model$cluster))+geom_point()
ggplot(iris, aes(Petal.Length, Petal.Width, color = model$cluster))+geom_point()
#Set Working Directory
getwd()
setwd("F:/Repositories/mca/semester-1/advanced-database-management-system/r-working-directory")
#include required libraries
library(stats)
library(dplyr)
library(ggplot2)
#Code
mydata = select(iris,c(1,2,3,4))
model = kmeans(mydata, 3)
print(model)
print(model$cluster)
print(model$size)
table(model$cluster,iris$Species)
#Plot Graph
model$cluster = as.factor(model$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = model$cluster))+geom_point()
#Set Working Directory
getwd()
setwd("F:/Repositories/mca/semester-1/advanced-database-management-system/r-working-directory")
#include required libraries
library(stats)
library(dplyr)
library(ggplot2)
#Code
mydata = select(iris,c(1,2,3,4))
model = kmeans(mydata, 3)
print(model)
print(model$cluster)
print(model$size)
table(model$cluster,iris$Species)
#Plot Graph
model$cluster = as.factor(model$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = model$cluster))+geom_point()
source('F:/Repositories/mca/semester-1/advanced-database-management-system/r-scripts/demo.R')
#Set Working Directory
getwd()
setwd("F:/Repositories/mca/semester-1/advanced-database-management-system/r-working-directory")
#include required libraries
library(stats)
library(dplyr)
library(ggplot2)
#Code
mydata = select(iris,c(1,2,3,4))
model = kmeans(mydata, 3)
print(model)
print(model$cluster)
print(model$size)
table(model$cluster,iris$Species)
#Plot Graph
model$cluster = as.factor(model$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = model$cluster))+geom_point()
#Set Working Directory
getwd()
setwd("F:/Repositories/mca/semester-1/advanced-database-management-system/r-working-directory")
#include required libraries
library(stats)
library(dplyr)
library(ggplot2)
#Code
mydata = select(iris,c(1,2,3,4))
model = kmeans(mydata, 3)
print(model)
print(model$cluster)
print(model$size)
table(model$cluster,iris$Species)
#Plot Graph
model$cluster = as.factor(model$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = model$cluster))+geom_point()
#Set Working Directory
getwd()
setwd("F:/Repositories/mca/semester-1/advanced-database-management-system/r-working-directory")
#include required libraries
library(stats)
library(dplyr)
library(ggplot2)
#Code
mydata = select(iris,c(1,2,3,4))
model = kmeans(mydata, 3)
print(model)
print(model$cluster)
print(model$size)
table(model$cluster,iris$Species)
#Plot Graph
model$cluster = as.factor(model$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = model$cluster))+geom_point()
#Code
mydata = select(iris,c(1,2,3,4))
model = kmeans(mydata, 3)
message("Value For Model = ",model)
message("Value for Cluster = ",model$cluster)
print(model$size)
#Code
mydata = select(iris,c(1,2,3,4))
model = kmeans(mydata, 3)
print("Model:")
print(model)
print("Cluster:")
print(model$cluster)
#Set Working Directory
getwd()
setwd("F:/Repositories/mca/semester-1/advanced-database-management-system/r-working-directory")
#include required libraries
library(stats)
library(dplyr)
library(ggplot2)
#Code
mydata = select(iris,c(1,2,3,4))
model = kmeans(mydata, 3)
print(model)
print(model$cluster)
print(model$size)
table(model$cluster,iris$Species)
#Plot Graph
model$cluster = as.factor(model$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = model$cluster))+geom_point()
data("Groceries")
#Code
mydata = select(iris,c(1,2,3,4))
model = kmeans(mydata, 3)
cat("mode:",model)
#Code
mydata = select(iris,c(1,2,3,4))
model = kmeans(mydata, 3)
print(paste("Model:",model))
install.packages("arules")
library(arules)
data("Groceries")
attributes(Groceries)
print(attributes(Groceries))
data("Groceries")
print(data("Groceries"))
inspect(head(Groceries,3))
View(Groceries)
#Apply Apriori Algorithm
apriori(data=Groceries, parameter = list(support=0.001, confidence=0.15))
#Apply Apriori Algorithm
model<-apriori(data=Groceries, parameter = list(support=0.001, confidence=0.15))
inspect(head(model,3))
#Install GGPlot library
#install.packages("ggplot2")
#simple Linear Regression
#Predictor Variable
x<-c(3,8,9,13,3,6,11,21,1,16)
#Response Variable
y<-c(30,57,64,72,36,43,59,90,20,83)
library(ggplot2)
plot(x,y,col="blue",main="scatter plot")
#Linear Regression Model
model = lm(y~x)
print(model)
#Attribute of model variable
print(attributes(model))
print(model.rank)
coef(model)
cat("coefficient: ",coef(model))
residuals(model)
summary(model)
abline(model)
#Predicting values manually y=a+bx
x10<-model$coefficients[[1]]+model$coefficients[[2]]*10
print("The Value for x10 is ",x10)
cat("The Value for x10 is ",x10)
print(a)
#using predict()
a<-data.frame(x=10)
print(a)
(model,a)
print(a)
pred<-predict(model,a)
cat("Using Predict value of x10 is", pred)
plot(model)
plot(model) #Returns 4 Graphs
# Loading package
library(dplyr)
# Summary of dataset in package
head(mtcars)
# Finding distance matrix
distance_mat <- dist(mtcars, method = 'euclidean')
distance_mat
# Fitting Hierarchical clustering Model
# to training dataset
set.seed(240)  # Setting seed
Hierar_cl <- hclust(distance_mat, method = "average")
Hierar_cl
# Plotting dendrogram
plot(Hierar_cl)
# Choosing no. of clusters
# Cutting tree by height
abline(h = 110, col = "green")
# Choosing no. of clusters
# Cutting tree by height
abline(h = 110, col = "green")
# Cutting tree by no. of clusters
fit <- cutree(Hierar_cl, k = 3 )
fit
#Load Dataset to Work on
library(arules)
data("Groceries")
print(attributes(Groceries))
inspect(head(Groceries,3))
View(Groceries)
#Apply Apriori Algorithm
model<-apriori(data=Groceries, parameter = list(support=0.001, confidence=0.15))
inspect(head(model,3))
install.packages("arulesViz")
#Predictor Variable
x<-c(3,8,9,13,3,6,11,21,1,16)
#Response Variable
y<-c(30,57,64,72,36,43,59,90,20,83)
library(ggplot2)
plot(x,y,col="blue",main="Scatter Plot")
#Linear Regression Model
model = lm(y~x)
print(model)
print(attributes(model))
cat("coefficient: ",coef(model))
print(coef(model))
residuals(model)
summary(model)
#Plot Line w.r.t x and y coordinates
abline(model)
#Predicting values manually y=a+bx
x10<-model$coefficients[[1]]+model$coefficients[[2]]*10
cat("The Value for x10 is ",x10)
#using predict()
a<-data.frame(x=10)
print(a)
pred<-predict(model,a)
cat("Using Predict value of x10 is", pred)
plot(model) #Returns 5 Graphs
#apriori
library(arules)
library(arulesViz)
mba_data<-read.csv("groceries.csv")
view(mba_data)
view(mba_data)
View(mba_data)
View(mba_data)
mba_data<-read.csv("dataset_apriori.csv")
mba_data<-read.csv("dataset_apriori.csv")
View(mba_data)
class(mba_data)
#method 1
t<-as(mba_data,"transactions")
class(t)
inspect(t)
mba_data<-read.csv("dataset_apriori.csv")
View(mba_data)
class(mba_data)
#method 1
t<-as(mba_data,"transactions")
class(t)
inspect(t)
class(mba_data)
#method 1
t<-as(mba_data,"transactions")
mba_data<-read.csv("dataset_apriori.csv")
View(mba_data)
class(mba_data)
#method 1
t<-as(mba_data,"transactions")
#method 1
t<-as(mba_data,"transactions")
class(t)
#Linear Regression Model
model = lm(formula = y~x)
#simple Linear Regression
#X = Height #Y =  Weight
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
library(ggplot2)
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
#Linear Regression Model
model = lm(y~x)
print(model)
print(attributes(model))
cat("coefficient: ",coef(model))
print(coef(model))
residuals(model)
summary(model)
abline(model)
#Predicting values manually y=a+bx
x10<-model$coefficients[[1]]+model$coefficients[[2]]*10
cat("The Value for x10 is ",x10)
#using predict()
a<-data.frame(x=10)
print(a)
pred<-predict(model,a)
cat("Using Predict value of x10 is", pred)
plot(model) #Returns 5 Graphs
#############
mba_data<-read.csv("data_apriori.csv")
#############
mba_data<-read.csv("dataset_apriori.csv")
trans<-split(mba_data$Customer_Id,mba_data$Products,"transactions")
trans<-split(mba_data$Products,mba_data$Customer_Id,"transactions")
class(trans)
inspect(trans)
head(trans)
rules<-apriori(trans,parameter=list(support=0.1,confidence=0.4,maxlen=3,minlen=3))
rules
print(rules)
inspect(rules)
plot(rules)
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
#Linear Regression Model
model = lm(y~x)
print(model)
print(attributes(model))
cat("coefficient: ",coef(model))
print(coef(model))
residuals(model)
summary(model)
abline(model)
#Predicting values manually y=a+bx
x10<-model$coefficients[[1]]+model$coefficients[[2]]*10
cat("The Value for x10 is ",x10)
#using predict()
a<-data.frame(x=10)
print(a)
pred<-predict(model,a)
cat("Using Predict value of x10 is", pred)
plot(model) #Returns 4 Graphs
